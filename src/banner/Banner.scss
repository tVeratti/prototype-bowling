@import '../shared/transitions';
@import '../shared/colors';

$offset-left: 25%;
$size-ball: 45vh;
$size-pin: 45vh;
$size-total: 85rem;
$position-left: 15%;

.banner {
  position: fixed;
  left: 0;
  right: 0;
  width: 100%;
  height: 700px;
}

.banner__background {
  position: absolute;
  left: 0;
  right: 0;
  height: 100vh;
  background-color: $base;
  background-image: repeating-linear-gradient(
    45deg,
    rgba($primary, 0.2),
    rgba($primary, 0.2) 35px,
    rgba($primary, 0.4) 35px,
    rgba($primary, 0.4) 70px
  );
}

.banner__graphics {
  position: absolute;
  left: 50%;
  transform: translateX(-35rem);
}

.ball {
  position: absolute;
  width: $size-ball;
  height: $size-ball;
  left: $position-left;
  z-index: 2;
  transform: translate(20rem, 38rem);
  fill: $base;

  // CSSTransition (ball)
  &-enter {
    opacity: 0;
    transform: translate(20rem, 50rem);
  }

  &-enter-active {
    opacity: 1;
    transform: translate(20rem, 38rem);
    transition: transform cubic(1s) 0.5s, opacity cubic(1s) 0.5s;
  }
}

.pin {
  position: absolute;
  width: $size-pin;
  height: $size-pin;
  stroke-width: 3px;
  //filter: drop-shadow(2px 2px 5px rgba(black, 0.2));
}

.banner__row {
  position: absolute;
  left: $position-left;

  // Place pins in 4 rows, offsetting
  // each a tiny bit higher.
  /**
    * - - - -   :nth-child(0) 0%
    *  - - -    :nth-child(1) 10%
    *   - -     :nth-child(2) 20%
    *    -      :nth-child(3) 30%
    */
  @for $i from 1 through (4) {
    $pin-color-hue: hsl($i * 50, 90%, ($i + 2) * 10%);
    $pin-color-bw: mix(white, mix($primary, $base, 30%), ($i + 1) * 20);
    $pin-color-tra: rgba($contrast, $i * 0.2);
    $pin-timer: (4 - $i) * 0.2s;

    // Vertical offset
    &:nth-child(#{$i}) {
      top: $i * 8rem;

      // CSSTransition (pin)
      &.row-enter {
        opacity: 0;
        transform: translateY(10rem);
      }

      &.row-enter-active,
      &.row-enter-done {
        opacity: 1;
        transform: translateY(0) rotate(0);
        transition: transform cubic(0.5s) 0.5s, opacity cubic(0.5s) 0.5s;
      }

      // Horizontal offset
      svg {
        @for $j from 1 through (4) {
          &:nth-child(#{$j}) {
            left: $j * 10rem;
            fill: $pin-color-bw;
          }
        }
      }
    }
  }

  // Explodey rotations
  @mixin explode($row, $col, $x: 0, $y: 0, $deg: 0, $scale: 1) {
    &:nth-child(#{$row}) svg:nth-child(#{$col}) {
      transform: translate($x * 1vh, $y * 0.5vh) rotate($deg) scale($scale);
    }
  }

  // Row (1 pin)
  @include explode(4, 1, -30, 3, -70deg, 1.5);
  // Row (2 pins)
  @include explode(3, 1, -25, -8, -45deg, 1.4);
  @include explode(3, 2, 40, 8, 55deg, 1.4);
  // Row (3 pins)
  @include explode(2, 1, -6, -10, -25deg);
  @include explode(2, 2, 5, -11, 10deg, 1.2);
  @include explode(2, 3, 15, 2, 45deg, 0.9);
  // Row (4 pins)
  @include explode(1, 1, 3, -15, -10deg, 0.6);
  @include explode(1, 2, 12, 1, 20deg, 0.7);
  @include explode(1, 3, 10, 5, 40deg, 0.6);
  @include explode(1, 4, 20, 10, 60deg, 0.7);

  &:nth-child(1) {
    filter: blur(0.2rem);
  }
  &:nth-child(2) {
    filter: blur(0.1rem);
  }
}
